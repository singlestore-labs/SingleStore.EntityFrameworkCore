// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using EntityFrameworkCore.SingleStore.IntegrationTests;
using EntityFrameworkCore.SingleStore.IntegrationTests.Models;
using System;
using System.Collections.Generic;

namespace EntityFrameworkCore.SingleStore.IntegrationTests.Migrations
{
    [DbContext(typeof(AppDb))]
    partial class AppDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(127);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(127);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(127);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(127);

                    b.Property<string>("RoleId")
                        .HasMaxLength(127);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(127);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(127);

                    b.Property<string>("Name")
                        .HasMaxLength(127);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.AppIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(127);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(127);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(127);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(127);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlogId");

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogPost");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password")
                        .HasMaxLength(20);

                    b.Property<string>("Username")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("CrmAdmins");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmAdminMenu", b =>
                {
                    b.Property<int>("AdminId");

                    b.Property<int>("MenuId");

                    b.HasKey("AdminId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("CrmAdminMenu");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmAdminRole", b =>
                {
                    b.Property<int>("AdminId");

                    b.Property<int>("RoleId");

                    b.HasKey("AdminId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("CrmAdminRole");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CrmMenus");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CrmRoles");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.DataTypesSimple", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("TypeBool");

                    b.Property<bool?>("TypeBoolN");

                    b.Property<byte>("TypeByte");

                    b.Property<byte?>("TypeByteN");

                    b.Property<char>("TypeChar");

                    b.Property<char?>("TypeCharN");

                    b.Property<DateTime>("TypeDateTime");

                    b.Property<DateTime?>("TypeDateTimeN");

                    b.Property<DateTimeOffset>("TypeDateTimeOffset");

                    b.Property<DateTimeOffset?>("TypeDateTimeOffsetN");

                    b.Property<decimal>("TypeDecimal");

                    b.Property<decimal?>("TypeDecimalN");

                    b.Property<double>("TypeDouble");

                    b.Property<double?>("TypeDoubleN");

                    b.Property<int>("TypeEnum");

                    b.Property<byte>("TypeEnumByte");

                    b.Property<byte?>("TypeEnumByteN");

                    b.Property<int?>("TypeEnumN");

                    b.Property<float>("TypeFloat");

                    b.Property<float?>("TypeFloatN");

                    b.Property<Guid>("TypeGuid");

                    b.Property<Guid?>("TypeGuidN");

                    b.Property<int>("TypeInt");

                    b.Property<int?>("TypeIntN");

                    b.Property<long>("TypeLong");

                    b.Property<long?>("TypeLongN");

                    b.Property<sbyte>("TypeSbyte");

                    b.Property<sbyte?>("TypeSbyteN");

                    b.Property<short>("TypeShort");

                    b.Property<short?>("TypeShortN");

                    b.Property<TimeSpan>("TypeTimeSpan");

                    b.Property<TimeSpan?>("TypeTimeSpanN");

                    b.Property<uint>("TypeUint");

                    b.Property<uint?>("TypeUintN");

                    b.Property<ulong>("TypeUlong");

                    b.Property<ulong?>("TypeUlongN");

                    b.Property<ushort>("TypeUshort");

                    b.Property<ushort?>("TypeUshortN");

                    b.HasKey("Id");

                    b.ToTable("DataTypesSimple");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.DataTypesVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("TypeByteArray")
                        .IsRequired();

                    b.Property<byte[]>("TypeByteArray255")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("TypeByteArray255N")
                        .HasMaxLength(255);

                    b.Property<byte[]>("TypeByteArrayN");

                    b.Property<string>("TypeJsonArray")
                        .IsRequired();

                    b.Property<string>("TypeJsonArrayN");

                    b.Property<string>("TypeJsonObject")
                        .IsRequired();

                    b.Property<string>("TypeJsonObjectN");

                    b.Property<string>("TypeString")
                        .IsRequired();

                    b.Property<string>("TypeString255")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("TypeString255N")
                        .HasMaxLength(255);

                    b.Property<string>("TypeStringN");

                    b.HasKey("Id");

                    b.ToTable("DataTypesVariable");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.GeneratedConcurrencyToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Gen");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("GeneratedConcurrencyToken");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.GeneratedContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(63)")
                        .HasComputedColumnSql("CONCAT_WS(', ',	JSON_UNQUOTE(JSON_EXTRACT(`ContactInfo`, \"$.Address\")), JSON_UNQUOTE(JSON_EXTRACT(`ContactInfo`, \"$.City\")), JSON_UNQUOTE(JSON_EXTRACT(`ContactInfo`, \"$.State\")), JSON_UNQUOTE(JSON_EXTRACT(`ContactInfo`, \"$.Zip\")))");

                    b.Property<string>("ContactInfo");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(63)")
                        .HasComputedColumnSql("JSON_UNQUOTE(JSON_EXTRACT(`ContactInfo`, \"$.Email\"))");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("VARCHAR(63)")
                        .HasComputedColumnSql("JSON_UNQUOTE(JSON_EXTRACT(`Names`, \"$[0]\"))");

                    b.Property<string>("Names");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Name");

                    b.ToTable("GeneratedContacts");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.GeneratedTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME(3)")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime6")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTimestamp3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(3)")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTimestamp6")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.ComputedColumn);

                    b.Property<DateTime>("UpdatedDateTime3")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME(3)")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.ComputedColumn);

                    b.Property<DateTime>("UpdatedDateTime6")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.ComputedColumn);

                    b.Property<DateTime>("UpdatedTimetamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.ComputedColumn);

                    b.Property<DateTime>("UpdatedTimetamp3")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP(3)")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.ComputedColumn);

                    b.Property<DateTime>("UpdatedTimetamp6")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP(6)")
                        .HasAnnotation("SingleStore:ValueGenerationStrategy", SingleStoreValueGenerationStrategy.ComputedColumn);

                    b.HasKey("Id");

                    b.ToTable("GeneratedTime");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(63);

                    b.Property<int?>("FamilyId");

                    b.Property<string>("Name");

                    b.Property<int?>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.PersonFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("PeopleFamilies");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ParentProductId");

                    b.HasKey("ProductId");

                    b.HasIndex("ParentProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("CategoryId");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Sequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Sequence");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.PersonKid", b =>
                {
                    b.HasBaseType("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Person");

                    b.Property<int>("Grade");

                    b.HasIndex("Discriminator");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("PersonKid");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.PersonParent", b =>
                {
                    b.HasBaseType("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Person");

                    b.Property<string>("Occupation");

                    b.Property<bool>("OnPta");

                    b.HasDiscriminator().HasValue("PersonParent");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.PersonTeacher", b =>
                {
                    b.HasBaseType("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Person");

                    b.HasDiscriminator().HasValue("PersonTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.BlogPost", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmAdminMenu", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmAdmin", "Admin")
                        .WithMany("AdminMenus")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmMenu", "Menu")
                        .WithMany("AdminMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmAdminRole", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmAdmin", "Admin")
                        .WithMany("AdminRoles")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.CrmRole", "Role")
                        .WithMany("AdminRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Person", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.PersonFamily", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Product", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Product", "ParentProduct")
                        .WithMany("ChildProducts")
                        .HasForeignKey("ParentProductId");
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.ProductCategory", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkCore.SingleStore.IntegrationTests.Models.PersonKid", b =>
                {
                    b.HasOne("EntityFrameworkCore.SingleStore.IntegrationTests.Models.PersonTeacher", "Teacher")
                        .WithMany("Students")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
